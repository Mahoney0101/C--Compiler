@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "ast.ASTNode",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_110844025 { 
   	label=types
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   AbstractType110844025[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AbstractType</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ arithmetic(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ assignment(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ numberOfBytes(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ suffix(): char</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ArrayType110844025[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ArrayType</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   baseType: Type [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
<TR><TD ALIGN="LEFT" >+ arithmetic(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ numberOfBytes(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ suffix(): char</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CharType110844025[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CharType</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
<TR><TD ALIGN="LEFT" >+ arithmetic(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ numberOfBytes(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ suffix(): char</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

DoubleType110844025[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DoubleType</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
<TR><TD ALIGN="LEFT" >+ arithmetic(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ numberOfBytes(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ suffix(): char</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ErrorType110844025[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ErrorType</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   message: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
<TR><TD ALIGN="LEFT" >+ arithmetic(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ assignment(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ numberOfBytes(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ suffix(): char</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

IntType110844025[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)IntType</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
<TR><TD ALIGN="LEFT" >+ arithmetic(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ numberOfBytes(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ suffix(): char</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RealType110844025[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RealType</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
<TR><TD ALIGN="LEFT" >+ arithmetic(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ numberOfBytes(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ suffix(): char</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

StructType110844025[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)StructType</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   fields: List&lt;VarDefinition&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
<TR><TD ALIGN="LEFT" >+ arithmetic(type: Type, node: ASTNode): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInstance(line: int, column: int, fields: List&lt;VarDefinition&gt;): StructType</TD></TR>
<TR><TD ALIGN="LEFT" >+ numberOfBytes(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ suffix(): char</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_175554779 { 
   	label=expressions
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   AbstractBinaryExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AbstractBinaryExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   operand1: Expression [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   operand2: Expression [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   operator: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

AbstractExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AbstractExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   type: Type [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

AbstractUnaryExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AbstractUnaryExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   operand: Expression [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   operator: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ArithmeticExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ArithmeticExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ArrayAccessExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ArrayAccessExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CastExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CastExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   expression: Expression [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   targetType: Type [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CharLiteralExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CharLiteralExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   value: char [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

DoubleLiteralExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DoubleLiteralExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   value: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

FieldAccessExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)FieldAccessExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   fieldName: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   structure: Expression [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

FunctionCallExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)FunctionCallExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   arguments: List&lt;Expression&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   functionName: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

IdentifierExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)IdentifierExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   identifier: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

IntLiteralExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)IntLiteralExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   value: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

LogicalExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)LogicalExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

LogicalNegationExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)LogicalNegationExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RealLiteralExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RealLiteralExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   value: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RelationalExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RelationalExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

UnaryMinusExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)UnaryMinusExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

VariableExpression42352495[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)VariableExpression</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   definition: VarDefinition [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_215087900 { 
   	label=statements
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   AssignmentStatement357932080[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AssignmentStatement</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   leftHandSide: Expression [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   rightHandSide: Expression [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

BlockStatement357932080[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)BlockStatement</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   statements: List&lt;Statement&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

FunctionCallStatement357932080[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)FunctionCallStatement</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   functionCallExpr: FunctionCallExpression [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

IfStatement357932080[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)IfStatement</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   condition: Expression [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   elseBlock: Statement [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   thenBlock: Statement [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ReadStatement357932080[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ReadStatement</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   targets: List&lt;Expression&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ReturnStatement357932080[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ReturnStatement</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   expression: Expression [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

WhileStatement357932080[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)WhileStatement</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   condition: Expression [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loopBlock: Statement [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

WriteStatement357932080[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)WriteStatement</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   expressions: List&lt;Expression&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_96898 { 
   	label=ast
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   ASTNode96898[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)ASTNode</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
<TR><TD ALIGN="LEFT" >+ getColumn(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getLine(): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];

AbstractASTNode96898[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AbstractASTNode</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   column: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   line: int [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

FuncDefinition96898[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)FuncDefinition</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   bodyStatements: List&lt;Statement&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   functionName: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   localVariables: List&lt;VarDefinition&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   parameters: List&lt;VarDefinition&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   returnType: Type [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Program96898[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Program</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   statements: List&lt;Statement&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   varDefinitions: List&lt;VarDefinition&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

VarDefinition96898[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)VarDefinition</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   names: List&lt;String&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   offset: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   type: Type [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ accept(visitor: Visitor&lt;TP, TR&gt;, param: TP): TR</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
ASTNode96898 -> AbstractASTNode96898[arrowhead=none, arrowtail=empty, dir=both];
ASTNode96898 -> AbstractBinaryExpression42352495[arrowhead=none];
ASTNode96898 -> AbstractExpression42352495[arrowhead=none];
ASTNode96898 -> AbstractType110844025[arrowhead=none];
ASTNode96898 -> AbstractUnaryExpression42352495[arrowhead=none];
ASTNode96898 -> ArithmeticExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> ArrayAccessExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> ArrayType110844025[label="accept() -> accept()"];
ASTNode96898 -> AssignmentStatement357932080[arrowhead=none];
ASTNode96898 -> AssignmentStatement357932080[label="accept() -> accept()"];
ASTNode96898 -> BlockStatement357932080[label="accept() -> accept()"];
ASTNode96898 -> CastExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> CharLiteralExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> CharType110844025[label="accept() -> accept()"];
ASTNode96898 -> DoubleLiteralExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> DoubleType110844025[label="accept() -> accept()"];
ASTNode96898 -> ErrorType110844025[label="accept() -> accept()"];
ASTNode96898 -> FieldAccessExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> FuncDefinition96898[label="accept() -> accept()"];
ASTNode96898 -> FunctionCallExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> FunctionCallStatement357932080[arrowhead=none];
ASTNode96898 -> FunctionCallStatement357932080[label="accept() -> accept()"];
ASTNode96898 -> IdentifierExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> IfStatement357932080[label="accept() -> accept()"];
ASTNode96898 -> IntLiteralExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> IntType110844025[label="accept() -> accept()"];
ASTNode96898 -> LogicalExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> LogicalNegationExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> Program96898[label="accept() -> accept()"];
ASTNode96898 -> ReadStatement357932080[label="accept() -> accept()"];
ASTNode96898 -> RealLiteralExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> RealType110844025[label="accept() -> accept()"];
ASTNode96898 -> RelationalExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> ReturnStatement357932080[label="accept() -> accept()"];
ASTNode96898 -> StructType110844025[label="accept() -> accept()"];
ASTNode96898 -> UnaryMinusExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> VarDefinition96898[arrowhead=none];
ASTNode96898 -> VarDefinition96898[label="accept() -> accept()"];
ASTNode96898 -> VariableExpression42352495[label="accept() -> accept()"];
ASTNode96898 -> WhileStatement357932080[label="accept() -> accept()"];
ASTNode96898 -> WriteStatement357932080[arrowhead=none];
ASTNode96898 -> WriteStatement357932080[label="accept() -> accept()"];
AbstractASTNode96898 -> AbstractExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> AbstractType110844025[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> AssignmentStatement357932080[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> BlockStatement357932080[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> FuncDefinition96898[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> FunctionCallStatement357932080[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> IfStatement357932080[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> Program96898[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> ReadStatement357932080[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> ReturnStatement357932080[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> VarDefinition96898[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> WhileStatement357932080[arrowhead=none, arrowtail=empty, dir=both];
AbstractASTNode96898 -> WriteStatement357932080[arrowhead=none, arrowtail=empty, dir=both];
AbstractBinaryExpression42352495 -> ASTNode96898[label="operand1
[0..1]", arrowhead=none];
AbstractBinaryExpression42352495 -> ASTNode96898[label="operand2
[0..1]", arrowhead=none];
AbstractBinaryExpression42352495 -> ArithmeticExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractBinaryExpression42352495 -> ArrayAccessExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractBinaryExpression42352495 -> LogicalExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractBinaryExpression42352495 -> RelationalExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> AbstractBinaryExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> AbstractUnaryExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> CastExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> CharLiteralExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> DoubleLiteralExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> FieldAccessExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> FunctionCallExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> IdentifierExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> IntLiteralExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> RealLiteralExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractExpression42352495 -> VariableExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractType110844025 -> ArrayType110844025[arrowhead=none, arrowtail=empty, dir=both];
AbstractType110844025 -> CharType110844025[arrowhead=none, arrowtail=empty, dir=both];
AbstractType110844025 -> DoubleType110844025[arrowhead=none, arrowtail=empty, dir=both];
AbstractType110844025 -> ErrorType110844025[arrowhead=none, arrowtail=empty, dir=both];
AbstractType110844025 -> IntType110844025[arrowhead=none, arrowtail=empty, dir=both];
AbstractType110844025 -> RealType110844025[arrowhead=none, arrowtail=empty, dir=both];
AbstractType110844025 -> StructType110844025[arrowhead=none, arrowtail=empty, dir=both];
AbstractUnaryExpression42352495 -> ASTNode96898[label="operand
[0..1]", arrowhead=none];
AbstractUnaryExpression42352495 -> LogicalNegationExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
AbstractUnaryExpression42352495 -> UnaryMinusExpression42352495[arrowhead=none, arrowtail=empty, dir=both];
ArrayType110844025 -> ASTNode96898[label="baseType
[0..1]", arrowhead=none];
AssignmentStatement357932080 -> BlockStatement357932080[arrowhead=none];
AssignmentStatement357932080 -> FunctionCallStatement357932080[arrowhead=none];
AssignmentStatement357932080 -> IfStatement357932080[arrowhead=none];
AssignmentStatement357932080 -> ReadStatement357932080[arrowhead=none];
AssignmentStatement357932080 -> ReturnStatement357932080[arrowhead=none];
AssignmentStatement357932080 -> WhileStatement357932080[arrowhead=none];
AssignmentStatement357932080 -> WriteStatement357932080[arrowhead=none];
BlockStatement357932080 -> FunctionCallStatement357932080[label="statements
[0..*]", arrowhead=none];
FuncDefinition96898 -> FunctionCallStatement357932080[label="bodyStatements
[0..*]", arrowhead=none];
FunctionCallStatement357932080 -> AssignmentStatement357932080[arrowhead=none];
FunctionCallStatement357932080 -> BlockStatement357932080[arrowhead=none];
FunctionCallStatement357932080 -> FunctionCallExpression42352495[label="functionCallExpr
[0..1]"];
FunctionCallStatement357932080 -> IfStatement357932080[arrowhead=none];
FunctionCallStatement357932080 -> ReadStatement357932080[arrowhead=none];
FunctionCallStatement357932080 -> ReturnStatement357932080[arrowhead=none];
FunctionCallStatement357932080 -> WhileStatement357932080[arrowhead=none];
FunctionCallStatement357932080 -> WriteStatement357932080[arrowhead=none];
IfStatement357932080 -> FunctionCallStatement357932080[label="elseBlock
[0..1]", arrowhead=none];
IfStatement357932080 -> FunctionCallStatement357932080[label="thenBlock
[0..1]", arrowhead=none];
Program96898 -> FunctionCallStatement357932080[label="statements
[0..*]", arrowhead=none];
Program96898 -> VarDefinition96898[label="varDefinitions
[0..*]"];
StructType110844025 -> VarDefinition96898[label="fields
[0..*]"];
VarDefinition96898 -> AbstractType110844025[arrowhead=none];
VarDefinition96898 -> FuncDefinition96898[arrowhead=none];
VariableExpression42352495 -> VarDefinition96898[label="definition
[0..1]"];
WhileStatement357932080 -> FunctionCallStatement357932080[label="loopBlock
[0..1]", arrowhead=none];
WriteStatement357932080 -> AbstractBinaryExpression42352495[arrowhead=none];
WriteStatement357932080 -> AbstractExpression42352495[arrowhead=none];
WriteStatement357932080 -> AbstractUnaryExpression42352495[arrowhead=none];
    
}
@enduml